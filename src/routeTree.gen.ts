/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardSettingsImport } from './routes/dashboard/settings'
import { Route as DashboardRequestsImport } from './routes/dashboard/requests'
import { Route as DashboardPurchasesImport } from './routes/dashboard/purchases'
import { Route as DashboardHelpImport } from './routes/dashboard/help'
import { Route as DashboardFavoritesImport } from './routes/dashboard/favorites'
import { Route as DashboardAvailabilitiesImport } from './routes/dashboard/availabilities'
import { Route as DashboardAboutImport } from './routes/dashboard/about'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardRequestsRoute = DashboardRequestsImport.update({
  path: '/requests',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardPurchasesRoute = DashboardPurchasesImport.update({
  path: '/purchases',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardHelpRoute = DashboardHelpImport.update({
  path: '/help',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardFavoritesRoute = DashboardFavoritesImport.update({
  path: '/favorites',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAvailabilitiesRoute = DashboardAvailabilitiesImport.update({
  path: '/availabilities',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAboutRoute = DashboardAboutImport.update({
  path: '/about',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/about': {
      id: '/dashboard/about'
      path: '/about'
      fullPath: '/dashboard/about'
      preLoaderRoute: typeof DashboardAboutImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/availabilities': {
      id: '/dashboard/availabilities'
      path: '/availabilities'
      fullPath: '/dashboard/availabilities'
      preLoaderRoute: typeof DashboardAvailabilitiesImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/favorites': {
      id: '/dashboard/favorites'
      path: '/favorites'
      fullPath: '/dashboard/favorites'
      preLoaderRoute: typeof DashboardFavoritesImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/help': {
      id: '/dashboard/help'
      path: '/help'
      fullPath: '/dashboard/help'
      preLoaderRoute: typeof DashboardHelpImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/purchases': {
      id: '/dashboard/purchases'
      path: '/purchases'
      fullPath: '/dashboard/purchases'
      preLoaderRoute: typeof DashboardPurchasesImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/requests': {
      id: '/dashboard/requests'
      path: '/requests'
      fullPath: '/dashboard/requests'
      preLoaderRoute: typeof DashboardRequestsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  DashboardRoute: DashboardRoute.addChildren({
    DashboardAboutRoute,
    DashboardAvailabilitiesRoute,
    DashboardFavoritesRoute,
    DashboardHelpRoute,
    DashboardPurchasesRoute,
    DashboardRequestsRoute,
    DashboardSettingsRoute,
    DashboardIndexRoute,
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/about",
        "/dashboard/availabilities",
        "/dashboard/favorites",
        "/dashboard/help",
        "/dashboard/purchases",
        "/dashboard/requests",
        "/dashboard/settings",
        "/dashboard/"
      ]
    },
    "/dashboard/about": {
      "filePath": "dashboard/about.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/availabilities": {
      "filePath": "dashboard/availabilities.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/favorites": {
      "filePath": "dashboard/favorites.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/help": {
      "filePath": "dashboard/help.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/purchases": {
      "filePath": "dashboard/purchases.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/requests": {
      "filePath": "dashboard/requests.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
